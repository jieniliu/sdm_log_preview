{"ast":null,"code":"import api from '../services/api';\nimport { ElLoading } from 'element-plus';\n\n// 只处理新结构\nfunction adaptLogData(raw) {\n  return {\n    action_type_count: raw.action_type_count || {},\n    avg_socket_time: raw.avg_socket_time || {},\n    user_count: raw.user_count || 0,\n    roaming_message_avg_time: raw.roaming_message_avg_time || 0,\n    delay_message_avg_time: raw.delay_message_avg_time || 0,\n    avg_roaming_response: raw.avg_roaming_response || {},\n    attachment_message_avg_time: raw.attachment_message_avg_time || {},\n    text_message_avg_time: raw.text_message_avg_time || {},\n    ...raw\n  };\n}\nexport default {\n  name: 'LogDataView',\n  data() {\n    return {\n      filters: {\n        startTime: Date.now() - 7 * 24 * 60 * 60 * 1000,\n        // 默认7天前\n        endTime: Date.now(),\n        messageType: 'm.text'\n      },\n      logData: {\n        action_type_count: {},\n        avg_socket_time: {},\n        user_count: 0,\n        roaming_message_avg_time: 0,\n        delay_message_avg_time: 0,\n        attachment_message_avg_time: {},\n        text_message_avg_time: {}\n      },\n      userLogsFilter: {\n        device_id: '',\n        launch_id: '',\n        event_type: '',\n        event_id: '',\n        local_event_id: ''\n      },\n      userLogsSearch: {\n        start_at: 0,\n        end_at: Date.now(),\n        user_id: '',\n        device_id: '',\n        launch_id: '',\n        action_type: '',\n        room_id: '',\n        message_type: '',\n        event_id: '',\n        local_event_id: ''\n      },\n      userLogsSearchResult: []\n    };\n  },\n  computed: {\n    actionGroup() {\n      // 分组规则\n      const nameMap = {\n        socket_disconnected_count: 'socket断开次数',\n        launch_count: '启动次数',\n        enter_room_count: '进入房间次数',\n        send_message_count: '发消息次数',\n        send_success_count: '消息发送成功次数',\n        send_fail_count: '消息发送失败次数',\n        encrypt_event: '加密事件',\n        encrypt_event_success: '加密成功',\n        encrypt_event_failed: '加密失败',\n        decrypt_event_failed: '解密失败',\n        decrypt_event_success: '解密成功',\n        upload_image: '上传图片',\n        upload_image_success: '上传图片成功',\n        upload_image_failed: '上传图片失败',\n        upload_image_cancelled: '取消上传图片',\n        upload_video: '上传视频',\n        upload_video_success: '上传视频成功',\n        upload_video_failed: '上传视频失败',\n        upload_gallery_list: '上传图库',\n        upload_gallery_list_success: '上传图库成功',\n        upload_gallery_list_failed: '上传图库失败',\n        upload_gallery_list_cancelled: '取消上传图库',\n        upload_file: '上传文件',\n        upload_file_success: '上传文件成功',\n        upload_file_failed: '上传文件失败',\n        upload_file_cancelled: '取消上传文件'\n      };\n      // 动态分组\n      const all = Object.entries(this.logData.action_type_count || {}).map(([key, value]) => ({\n        name: nameMap[key] || key,\n        value,\n        key\n      }));\n      // 上传相关：所有以 upload_ 开头的\n      const upload = all.filter(i => i.key.startsWith('upload_'));\n      // 加解密相关：encrypt_*, decrypt_*\n      const crypto = all.filter(i => i.key.startsWith('encrypt_') || i.key.startsWith('decrypt_'));\n      // 消息相关：send_*\n      const message = all.filter(i => i.key.startsWith('send_'));\n      // 房间/Socket相关\n      const roomSocket = all.filter(i => ['launch_count', 'enter_room_count', 'socket_disconnected_count'].includes(i.key));\n      // 其它\n      const groupedKeys = new Set([...upload, ...crypto, ...message, ...roomSocket].map(i => i.key));\n      const other = all.filter(i => !groupedKeys.has(i.key));\n      // 分组内排序\n      const sortByKey = arr => arr.slice().sort((a, b) => a.key.localeCompare(b.key));\n      return {\n        message: sortByKey(message),\n        upload: sortByKey(upload),\n        crypto: sortByKey(crypto),\n        roomSocket: sortByKey(roomSocket),\n        other: sortByKey(other)\n      };\n    },\n    timeData() {\n      const timeFields = [{\n        key: 'avg_socket_time',\n        name: 'socket链接时长',\n        value: this.formatNumber(this.logData.avg_socket_time?.average_response_time || 0)\n      }, {\n        key: 'roaming_message_avg_time',\n        name: '漫游消息接收时间',\n        value: this.formatNumber(this.logData.roaming_message_avg_time || 0)\n      }, {\n        key: 'delay_message_avg_time',\n        name: '在线状态接收消息耗时',\n        value: this.formatNumber(this.logData.delay_message_avg_time || 0)\n      }];\n      return timeFields.filter(item => Number(item.value) > 0);\n    },\n    userLogsColumns() {\n      // 动态生成 user_logs 的所有字段列\n      const logs = this.logData.user_logs || [];\n      if (!logs.length) return [];\n      return Object.keys(logs[0]).map(key => ({\n        prop: key,\n        label: key,\n        minWidth: 120\n      }));\n    },\n    filteredUserLogs() {\n      // 多条件模糊筛选\n      const {\n        device_id,\n        launch_id,\n        event_type,\n        event_id,\n        local_event_id\n      } = this.userLogsFilter;\n      return (this.logData.user_logs || []).filter(item => {\n        if (device_id && !(item.device_id || '').includes(device_id)) return false;\n        if (launch_id && !(item.launch_id || '').includes(launch_id)) return false;\n        if (event_type && !(item.event_type || '').includes(event_type)) return false;\n        if (event_id && !(item.event_id || '').includes(event_id)) return false;\n        if (local_event_id && !(item.local_event_id || '').includes(local_event_id)) return false;\n        return true;\n      });\n    },\n    textMessageAvgList() {\n      const t = this.logData.text_message_avg_time || {};\n      const total = t.send_text_message_avg_time || 1;\n      return [{\n        label: '加密耗时',\n        value: this.formatNumber(t.encrypt_avg_time || 0),\n        percent: 0\n      }, {\n        label: 'API耗时',\n        value: this.formatNumber(t.send_text_message_avg_time || 0),\n        percent: 0\n      }];\n    },\n    attachmentMessageAvgList() {\n      const t = this.logData.attachment_message_avg_time || {};\n      const total = t.send_message_total_avg_time || 1;\n      return [{\n        label: '上传耗时',\n        value: this.formatNumber(t.upload_avg_time || 0),\n        percent: t.upload_avg_time && total ? Math.round(100 * t.upload_avg_time / total) : 0\n      }, {\n        label: '发送API耗时',\n        value: this.formatNumber(t.send_message_api_avg_time || 0),\n        percent: t.send_message_api_avg_time && total ? Math.round(100 * t.send_message_api_avg_time / total) : 0\n      }, {\n        label: '总耗时',\n        value: this.formatNumber(t.send_message_total_avg_time || 0),\n        percent: 100\n      }];\n    }\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    async fetchData() {\n      let loadingInstance = null;\n      try {\n        loadingInstance = ElLoading.service({\n          lock: true,\n          text: '加载中...',\n          background: 'rgba(0,0,0,0.3)'\n        });\n        const response = await api.getLogSummary(this.filters.startTime, this.filters.endTime, this.filters.messageType);\n        this.logData = adaptLogData(response.data);\n      } catch (error) {\n        console.error('获取日志数据失败:', error);\n        this.$message.error('获取数据失败，请稍后重试');\n      } finally {\n        if (loadingInstance) loadingInstance.close();\n      }\n    },\n    formatNumber(value) {\n      return Number(value).toFixed(1);\n    },\n    clearUserLogsFilter() {\n      this.userLogsFilter = {\n        device_id: '',\n        launch_id: '',\n        event_type: '',\n        event_id: '',\n        local_event_id: ''\n      };\n    },\n    async searchUserLogs() {\n      try {\n        const params = {\n          ...this.userLogsSearch\n        };\n        // 时间戳转数字\n        params.start_at = Number(params.start_at) || 0;\n        params.end_at = Number(params.end_at) || Date.now();\n        const {\n          data\n        } = await api.searchUserLogs(params);\n        this.userLogsSearchResult = Array.isArray(data) ? data : [];\n      } catch (e) {\n        this.userLogsSearchResult = [];\n        this.$message.error('用户日志搜索失败');\n      }\n    },\n    clearUserLogsSearch() {\n      this.userLogsSearch = {\n        start_at: 0,\n        end_at: Date.now(),\n        user_id: '',\n        device_id: '',\n        launch_id: '',\n        action_type: '',\n        room_id: '',\n        message_type: '',\n        event_id: '',\n        local_event_id: ''\n      };\n      this.userLogsSearchResult = [];\n    },\n    onMessageTypeChange() {\n      this.fetchData();\n    }\n  }\n};","map":{"version":3,"names":["api","ElLoading","adaptLogData","raw","action_type_count","avg_socket_time","user_count","roaming_message_avg_time","delay_message_avg_time","avg_roaming_response","attachment_message_avg_time","text_message_avg_time","name","data","filters","startTime","Date","now","endTime","messageType","logData","userLogsFilter","device_id","launch_id","event_type","event_id","local_event_id","userLogsSearch","start_at","end_at","user_id","action_type","room_id","message_type","userLogsSearchResult","computed","actionGroup","nameMap","socket_disconnected_count","launch_count","enter_room_count","send_message_count","send_success_count","send_fail_count","encrypt_event","encrypt_event_success","encrypt_event_failed","decrypt_event_failed","decrypt_event_success","upload_image","upload_image_success","upload_image_failed","upload_image_cancelled","upload_video","upload_video_success","upload_video_failed","upload_gallery_list","upload_gallery_list_success","upload_gallery_list_failed","upload_gallery_list_cancelled","upload_file","upload_file_success","upload_file_failed","upload_file_cancelled","all","Object","entries","map","key","value","upload","filter","i","startsWith","crypto","message","roomSocket","includes","groupedKeys","Set","other","has","sortByKey","arr","slice","sort","a","b","localeCompare","timeData","timeFields","formatNumber","average_response_time","item","Number","userLogsColumns","logs","user_logs","length","keys","prop","label","minWidth","filteredUserLogs","textMessageAvgList","t","total","send_text_message_avg_time","encrypt_avg_time","percent","attachmentMessageAvgList","send_message_total_avg_time","upload_avg_time","Math","round","send_message_api_avg_time","mounted","fetchData","methods","loadingInstance","service","lock","text","background","response","getLogSummary","error","console","$message","close","toFixed","clearUserLogsFilter","searchUserLogs","params","Array","isArray","e","clearUserLogsSearch","onMessageTypeChange"],"sources":["/Users/apple/Documents/sdm_log_preview/src/views/LogDataView.vue"],"sourcesContent":["<template>\n  <div class=\"log-data-container\">\n    <h1 class=\"page-title\">日志数据中心</h1>\n    \n    <el-card class=\"filter-card\">\n      <div class=\"filter-container\">\n        <div class=\"filter-group\">\n          <div class=\"filter-item\">\n            <span class=\"filter-label\">开始时间：</span>\n            <el-date-picker\n              v-model=\"filters.startTime\"\n              type=\"datetime\"\n              placeholder=\"选择开始时间\"\n              format=\"YYYY-MM-DD HH:mm:ss\"\n              value-format=\"x\"\n              size=\"small\"\n              class=\"custom-date-picker dark-date-input\"\n              :popper-class=\"'dark-date-picker'\"\n              :clearable=\"true\"\n              :clear-icon=\"'el-icon-circle-close'\"\n            />\n          </div>\n          \n          <div class=\"filter-item\">\n            <span class=\"filter-label\">结束时间：</span>\n            <el-date-picker\n              v-model=\"filters.endTime\"\n              type=\"datetime\"\n              placeholder=\"选择结束时间\"\n              format=\"YYYY-MM-DD HH:mm:ss\"\n              value-format=\"x\"\n              size=\"small\"\n              class=\"custom-date-picker dark-date-input\"\n              :popper-class=\"'dark-date-picker'\"\n              :clearable=\"true\"\n              :clear-icon=\"'el-icon-circle-close'\"\n            />\n          </div>\n        </div>\n        \n        <div class=\"filter-group\">\n          <div class=\"filter-item\">\n            <span class=\"filter-label\">消息类型：</span>\n            <el-select\n              v-model=\"filters.messageType\"\n              placeholder=\"请选择消息类型\"\n              clearable\n              size=\"small\"\n              popper-class=\"dark-select-dropdown\"\n              class=\"dark-select\"\n              @change=\"onMessageTypeChange\"\n            >\n              <el-option label=\"文本消息\" value=\"m.text\" />\n              <el-option label=\"图片消息\" value=\"m.image\" />\n              <el-option label=\"视频消息\" value=\"m.video\" />\n              <el-option label=\"语音消息\" value=\"m.audio\" />\n              <el-option label=\"图库消息\" value=\"m.gallery\" />\n              <el-option label=\"文件消息\" value=\"m.file\" />\n            </el-select>\n          </div>\n        </div>\n\n        <div class=\"filter-group filter-button-group\">\n          <el-button type=\"primary\" @click=\"fetchData\" size=\"small\" class=\"query-button\">查询</el-button>\n        </div>\n      </div>\n    </el-card>\n    \n    <div class=\"data-display-section\">\n      <!-- 核心指标卡片 -->\n      <el-row :gutter=\"20\">\n        <el-col :xs=\"24\" :sm=\"6\" :md=\"6\" :lg=\"6\" :xl=\"6\">\n          <div class=\"custom-metric-card\">\n            <div class=\"metric-value\">{{ logData.user_count || 0 }}</div>\n            <div class=\"metric-title\">用户数量</div>\n          </div>\n        </el-col>\n        <el-col :xs=\"24\" :sm=\"6\" :md=\"6\" :lg=\"6\" :xl=\"6\">\n          <div class=\"custom-metric-card\">\n            <div class=\"metric-value\">{{ formatNumber(logData.avg_socket_time?.average_response_time || 0) }}</div>\n            <div class=\"metric-title\">Socket响应时间 (ms)</div>\n          </div>\n        </el-col>\n        <el-col :xs=\"24\" :sm=\"6\" :md=\"6\" :lg=\"6\" :xl=\"6\">\n          <div class=\"custom-metric-card\">\n            <div class=\"metric-value\">{{ formatNumber(logData.roaming_message_avg_time || 0) }}</div>\n            <div class=\"metric-title\">漫游消息接收时间 (ms)</div>\n          </div>\n        </el-col>\n        <el-col :xs=\"24\" :sm=\"6\" :md=\"6\" :lg=\"6\" :xl=\"6\">\n          <div class=\"custom-metric-card\">\n            <div class=\"metric-value\">{{ formatNumber(logData.delay_message_avg_time || 0) }}</div>\n            <div class=\"metric-title\">在线状态接收消息耗时 (ms)</div>\n          </div>\n        </el-col>\n      </el-row>\n      \n      <!-- 漫游消息流程图 -->\n      <el-card class=\"roaming-flow-card\" v-if=\"logData.avg_roaming_response\">\n        <template #header>\n          <div class=\"card-header\"><h3>漫游消息流程耗时</h3></div>\n        </template>\n        <div class=\"roaming-flow-container\">\n          <div class=\"flow-node\" id=\"socket-connected\">\n            <div class=\"node-content\">socket_connected</div>\n          </div>\n          <div class=\"flow-arrow\">\n            <div class=\"arrow-line\"></div>\n            <div class=\"arrow-label\">{{ formatNumber(0.0003) }}ms</div>\n          </div>\n          <div class=\"flow-node\" id=\"receive-seqs\">\n            <div class=\"node-content\">receive_seqs_updated_response</div>\n          </div>\n          <div class=\"flow-arrow\">\n            <div class=\"arrow-line\"></div>\n            <div class=\"arrow-label\">{{ formatNumber(logData.avg_roaming_response?.append_need_update_room_avg || 0) }}ms</div>\n          </div>\n          <div class=\"flow-node\" id=\"append-need\">\n            <div class=\"node-content\">append_need_update_room</div>\n          </div>\n          <div class=\"flow-arrow\">\n            <div class=\"arrow-line\"></div>\n            <div class=\"arrow-label\">{{ formatNumber(logData.avg_roaming_response?.roaming_get_messages_from_server_avg || 0) }}ms</div>\n          </div>\n          <div class=\"flow-node\" id=\"get-messages\">\n            <div class=\"node-content\">roaming_get_messages_from_server</div>\n          </div>\n          <div class=\"flow-arrow\">\n            <div class=\"arrow-line\"></div>\n            <div class=\"arrow-label\">{{ formatNumber(logData.avg_roaming_response?.roaming_receive_message_avg || 0) }}ms</div>\n          </div>\n          <div class=\"flow-node\" id=\"receive-message\">\n            <div class=\"node-content\">roaming_receive_message</div>\n          </div>\n        </div>\n        <div class=\"roaming-stats\">\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">receive_seqs_updated_response 平均耗时:</span>\n            <span class=\"stat-value\">{{ formatNumber(logData.avg_roaming_response?.receive_seqs_updated_response_avg || 0) }}ms</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-label\">总平均耗时:</span>\n            <span class=\"stat-value\">{{ formatNumber(logData.avg_roaming_response?.total_avg || 0) }}ms</span>\n          </div>\n        </div>\n      </el-card>\n      <el-row :gutter=\"20\" style=\"margin-bottom: 24px;\">\n        <el-col v-if=\"filters.messageType === 'm.text' || !filters.messageType\" :xs=\"24\" :sm=\"12\" :md=\"12\" :lg=\"12\" :xl=\"12\">\n          <el-card class=\"table-card custom-table-card\" style=\"height: 100%;\">\n            <template #header>\n              <div class=\"card-header\"><h3>文本消息耗时分布</h3></div>\n            </template>\n            <div class=\"metric-card-inner\">\n              <div v-for=\"(v, k) in textMessageAvgList\" :key=\"k\" style=\"margin-bottom: 10px; display: flex; align-items: center;\">\n                <span class=\"metric-card-label\" style=\"width: 100px;\">{{ v.label }}</span>\n                <span class=\"metric-card-value\" style=\"margin-left: 10px; min-width: 100px;\">{{ v.value }} ms</span>\n                <span class=\"metric-card-percent\" style=\"margin-left: 10px; min-width: 40px; color: var(--text-secondary);\">{{ v.percent }}%</span>\n              </div>\n            </div>\n          </el-card>\n        </el-col>\n        <el-col v-else :xs=\"24\" :sm=\"12\" :md=\"12\" :lg=\"12\" :xl=\"12\">\n          <el-card class=\"table-card custom-table-card\" style=\"height: 100%;\">\n            <template #header>\n              <div class=\"card-header\"><h3>附件消息耗时分布</h3></div>\n            </template>\n            <div class=\"metric-card-inner\">\n              <div v-for=\"(v, k) in attachmentMessageAvgList\" :key=\"k\" style=\"margin-bottom: 10px; display: flex; align-items: center;\">\n                <span class=\"metric-card-label\" style=\"width: 100px;\">{{ v.label }}</span>\n                <span class=\"metric-card-value\" style=\"margin-left: 10px; min-width: 100px;\">{{ v.value }} ms</span>\n                <span class=\"metric-card-percent\" style=\"margin-left: 10px; min-width: 40px; color: var(--text-secondary);\">{{ v.percent }}%</span>\n              </div>\n            </div>\n          </el-card>\n        </el-col>\n      </el-row>\n      <!-- 分组表格区域 -->\n      <el-row :gutter=\"20\">\n        <!-- 左侧：消息、加解密、房间/Socket -->\n        <el-col :xs=\"24\" :sm=\"24\" :md=\"16\" :lg=\"16\" :xl=\"16\">\n          <el-card class=\"table-card custom-table-card\" style=\"margin-bottom: 20px;\">\n            <template #header>\n              <div class=\"card-header\"><h3>消息相关</h3></div>\n            </template>\n            <div class=\"table-wrapper\">\n              <el-table :data=\"actionGroup.message\" size=\"small\" stripe style=\"width: 100%\" class=\"dark-table custom-border-table no-header-line\">\n                <el-table-column prop=\"name\" label=\"事件\" min-width=\"120\" />\n                <el-table-column prop=\"value\" label=\"数值\" width=\"100\" align=\"right\" />\n                <el-table-column prop=\"key\" label=\"字段\" min-width=\"140\" class-name=\"field-column\" />\n              </el-table>\n            </div>\n          </el-card>\n          <el-card class=\"table-card custom-table-card\" style=\"margin-bottom: 20px;\">\n            <template #header>\n              <div class=\"card-header\"><h3>加解密相关</h3></div>\n            </template>\n            <div class=\"table-wrapper\">\n              <el-table :data=\"actionGroup.crypto\" size=\"small\" stripe style=\"width: 100%\" class=\"dark-table custom-border-table no-header-line\">\n                <el-table-column prop=\"name\" label=\"事件\" min-width=\"120\" />\n                <el-table-column prop=\"value\" label=\"数值\" width=\"100\" align=\"right\" />\n                <el-table-column prop=\"key\" label=\"字段\" min-width=\"140\" class-name=\"field-column\" />\n              </el-table>\n            </div>\n          </el-card>\n          <el-card class=\"table-card custom-table-card\">\n            <template #header>\n              <div class=\"card-header\"><h3>房间/Socket相关</h3></div>\n            </template>\n            <div class=\"table-wrapper\">\n              <el-table :data=\"actionGroup.roomSocket\" size=\"small\" stripe style=\"width: 100%\" class=\"dark-table custom-border-table no-header-line\">\n                <el-table-column prop=\"name\" label=\"事件\" min-width=\"120\" />\n                <el-table-column prop=\"value\" label=\"数值\" width=\"100\" align=\"right\" />\n                <el-table-column prop=\"key\" label=\"字段\" min-width=\"140\" class-name=\"field-column\" />\n              </el-table>\n            </div>\n          </el-card>\n        </el-col>\n        <!-- 右侧：上传相关 -->\n        <el-col :xs=\"24\" :sm=\"24\" :md=\"8\" :lg=\"8\" :xl=\"8\">\n          <el-card class=\"table-card custom-table-card\">\n            <template #header>\n              <div class=\"card-header\"><h3>上传相关</h3></div>\n            </template>\n            <div class=\"table-wrapper\">\n              <el-table :data=\"actionGroup.upload\" size=\"small\" stripe style=\"width: 100%\" class=\"dark-table custom-border-table no-header-line\">\n                <el-table-column prop=\"name\" label=\"事件\" min-width=\"120\" />\n                <el-table-column prop=\"value\" label=\"数值\" width=\"100\" align=\"right\" />\n                <el-table-column prop=\"key\" label=\"字段\" min-width=\"140\" class-name=\"field-column\" />\n              </el-table>\n            </div>\n          </el-card>\n        </el-col>\n      </el-row>\n      <el-row v-if=\"actionGroup.other.length\">\n        <el-col :span=\"24\">\n          <el-card class=\"table-card custom-table-card\">\n            <template #header>\n              <div class=\"card-header\"><h3>其它操作</h3></div>\n            </template>\n            <div class=\"table-wrapper\">\n              <el-table :data=\"actionGroup.other\" size=\"small\" stripe style=\"width: 100%\" class=\"dark-table custom-border-table no-header-line\">\n                <el-table-column prop=\"name\" label=\"事件\" min-width=\"120\" />\n                <el-table-column prop=\"value\" label=\"数值\" width=\"100\" align=\"right\" />\n                <el-table-column prop=\"key\" label=\"字段\" min-width=\"140\" class-name=\"field-column\" />\n              </el-table>\n            </div>\n          </el-card>\n        </el-col>\n      </el-row>\n      <!-- user_logs 表格及筛选 -->\n      <el-card v-if=\"logData.user_logs && logData.user_logs.length\" class=\"table-card custom-table-card\" style=\"margin-top: 32px;\">\n        <template #header>\n          <div class=\"card-header\">\n            <h3>用户日志明细</h3>\n          </div>\n        </template>\n        <div class=\"user-logs-filter-bar\" style=\"margin-bottom: 16px; display: flex; flex-wrap: wrap; gap: 12px; align-items: center;\">\n          <el-input v-model=\"userLogsFilter.device_id\" placeholder=\"筛选 device_id\" size=\"small\" class=\"dark-input\" clearable style=\"width: 180px;\" />\n          <el-input v-model=\"userLogsFilter.launch_id\" placeholder=\"筛选 launch_id\" size=\"small\" class=\"dark-input\" clearable style=\"width: 180px;\" />\n          <el-input v-model=\"userLogsFilter.event_type\" placeholder=\"筛选 event_type\" size=\"small\" class=\"dark-input\" clearable style=\"width: 180px;\" />\n          <el-input v-model=\"userLogsFilter.event_id\" placeholder=\"筛选 event_id\" size=\"small\" class=\"dark-input\" clearable style=\"width: 180px;\" />\n          <el-input v-model=\"userLogsFilter.local_event_id\" placeholder=\"筛选 local_event_id\" size=\"small\" class=\"dark-input\" clearable style=\"width: 180px;\" />\n          <el-button size=\"small\" @click=\"clearUserLogsFilter\" type=\"info\">重置</el-button>\n        </div>\n        <div class=\"table-wrapper\">\n          <el-table :data=\"filteredUserLogs\" size=\"small\" stripe style=\"width: 100%\" class=\"dark-table custom-border-table no-header-line\">\n            <el-table-column prop=\"sdn_url\" label=\"sdn_url\" min-width=\"160\" />\n            <el-table-column prop=\"trace_id\" label=\"trace_id\" min-width=\"180\" />\n            <el-table-column prop=\"user_id\" label=\"user_id\" min-width=\"220\" />\n            <el-table-column prop=\"platform\" label=\"platform\" min-width=\"100\" />\n            <el-table-column prop=\"device_id\" label=\"device_id\" min-width=\"180\" />\n            <el-table-column prop=\"launch_id\" label=\"launch_id\" min-width=\"180\" />\n            <el-table-column prop=\"action_type\" label=\"action_type\" min-width=\"160\" />\n            <el-table-column prop=\"room_id\" label=\"room_id\" min-width=\"160\" />\n            <el-table-column prop=\"event_type\" label=\"event_type\" min-width=\"160\" />\n            <el-table-column prop=\"message_type\" label=\"message_type\" min-width=\"160\" />\n            <el-table-column prop=\"local_event_id\" label=\"local_event_id\" min-width=\"180\" />\n            <el-table-column prop=\"event_id\" label=\"event_id\" min-width=\"180\" />\n            <el-table-column prop=\"other\" label=\"other\" min-width=\"120\" />\n            <el-table-column prop=\"timestamp\" label=\"timestamp\" min-width=\"180\" />\n          </el-table>\n        </div>\n      </el-card>\n      <!-- userLogs 独立搜索区和表格 -->\n      <el-card class=\"table-card custom-table-card\" style=\"margin-top: 32px;\">\n        <template #header>\n          <div class=\"card-header\">\n            <h3>用户日志搜索</h3>\n          </div>\n        </template>\n        <div class=\"user-logs-filter-bar\" style=\"margin-bottom: 16px; display: flex; flex-wrap: wrap; gap: 12px; align-items: center;\">\n          <el-date-picker v-model=\"userLogsSearch.start_at\" type=\"datetime\" placeholder=\"开始时间\" format=\"YYYY-MM-DD HH:mm:ss\" value-format=\"x\" size=\"small\" class=\"dark-date-input\" style=\"width: 180px;\" />\n          <el-date-picker v-model=\"userLogsSearch.end_at\" type=\"datetime\" placeholder=\"结束时间\" format=\"YYYY-MM-DD HH:mm:ss\" value-format=\"x\" size=\"small\" class=\"dark-date-input\" style=\"width: 180px;\" />\n          <el-input v-model=\"userLogsSearch.user_id\" placeholder=\"user_id\" size=\"small\" class=\"dark-input\" clearable style=\"width: 160px;\" />\n          <el-input v-model=\"userLogsSearch.device_id\" placeholder=\"device_id\" size=\"small\" class=\"dark-input\" clearable style=\"width: 140px;\" />\n          <el-input v-model=\"userLogsSearch.launch_id\" placeholder=\"launch_id\" size=\"small\" class=\"dark-input\" clearable style=\"width: 140px;\" />\n          <el-input v-model=\"userLogsSearch.action_type\" placeholder=\"action_type\" size=\"small\" class=\"dark-input\" clearable style=\"width: 140px;\" />\n          <el-input v-model=\"userLogsSearch.room_id\" placeholder=\"room_id\" size=\"small\" class=\"dark-input\" clearable style=\"width: 140px;\" />\n          <el-input v-model=\"userLogsSearch.message_type\" placeholder=\"message_type\" size=\"small\" class=\"dark-input\" clearable style=\"width: 140px;\" />\n          <el-input v-model=\"userLogsSearch.event_id\" placeholder=\"event_id\" size=\"small\" class=\"dark-input\" clearable style=\"width: 140px;\" />\n          <el-input v-model=\"userLogsSearch.local_event_id\" placeholder=\"local_event_id\" size=\"small\" class=\"dark-input\" clearable style=\"width: 140px;\" />\n          <el-button size=\"small\" type=\"primary\" @click=\"searchUserLogs\">搜索</el-button>\n          <el-button size=\"small\" @click=\"clearUserLogsSearch\" type=\"info\">重置</el-button>\n        </div>\n        <div class=\"table-wrapper\">\n          <el-table :data=\"userLogsSearchResult\" size=\"small\" stripe style=\"width: 100%\" class=\"dark-table custom-border-table no-header-line\">\n            <el-table-column prop=\"sdn_url\" label=\"sdn_url\" min-width=\"160\" />\n            <el-table-column prop=\"trace_id\" label=\"trace_id\" min-width=\"180\" />\n            <el-table-column prop=\"user_id\" label=\"user_id\" min-width=\"220\" />\n            <el-table-column prop=\"platform\" label=\"platform\" min-width=\"100\" />\n            <el-table-column prop=\"device_id\" label=\"device_id\" min-width=\"180\" />\n            <el-table-column prop=\"launch_id\" label=\"launch_id\" min-width=\"180\" />\n            <el-table-column prop=\"action_type\" label=\"action_type\" min-width=\"160\" />\n            <el-table-column prop=\"room_id\" label=\"room_id\" min-width=\"160\" />\n            <el-table-column prop=\"event_type\" label=\"event_type\" min-width=\"160\" />\n            <el-table-column prop=\"message_type\" label=\"message_type\" min-width=\"160\" />\n            <el-table-column prop=\"local_event_id\" label=\"local_event_id\" min-width=\"180\" />\n            <el-table-column prop=\"event_id\" label=\"event_id\" min-width=\"180\" />\n            <el-table-column prop=\"other\" label=\"other\" min-width=\"120\" />\n            <el-table-column prop=\"timestamp\" label=\"timestamp\" min-width=\"180\" />\n          </el-table>\n        </div>\n      </el-card>\n    </div>\n  </div>\n</template>\n\n<script>\nimport api from '../services/api'\nimport { ElLoading } from 'element-plus'\n\n// 只处理新结构\nfunction adaptLogData(raw) {\n  return {\n    action_type_count: raw.action_type_count || {},\n    avg_socket_time: raw.avg_socket_time || {},\n    user_count: raw.user_count || 0,\n    roaming_message_avg_time: raw.roaming_message_avg_time || 0,\n    delay_message_avg_time: raw.delay_message_avg_time || 0,\n    avg_roaming_response: raw.avg_roaming_response || {},\n    attachment_message_avg_time: raw.attachment_message_avg_time || {},\n    text_message_avg_time: raw.text_message_avg_time || {},\n    ...raw\n  }\n}\n\nexport default {\n  name: 'LogDataView',\n  data() {\n    return {\n      filters: {\n        startTime: Date.now() - 7 * 24 * 60 * 60 * 1000, // 默认7天前\n        endTime: Date.now(),\n        messageType: 'm.text'\n      },\n      logData: {\n        action_type_count: {},\n        avg_socket_time: {},\n        user_count: 0,\n        roaming_message_avg_time: 0,\n        delay_message_avg_time: 0,\n        attachment_message_avg_time: {},\n        text_message_avg_time: {}\n      },\n      userLogsFilter: {\n        device_id: '',\n        launch_id: '',\n        event_type: '',\n        event_id: '',\n        local_event_id: ''\n      },\n      userLogsSearch: {\n        start_at: 0,\n        end_at: Date.now(),\n        user_id: '',\n        device_id: '',\n        launch_id: '',\n        action_type: '',\n        room_id: '',\n        message_type: '',\n        event_id: '',\n        local_event_id: ''\n      },\n      userLogsSearchResult: [],\n    }\n  },\n  computed: {\n    actionGroup() {\n      // 分组规则\n      const nameMap = {\n        socket_disconnected_count: 'socket断开次数',\n        launch_count: '启动次数',\n        enter_room_count: '进入房间次数',\n        send_message_count: '发消息次数',\n        send_success_count: '消息发送成功次数',\n        send_fail_count: '消息发送失败次数',\n        encrypt_event: '加密事件',\n        encrypt_event_success: '加密成功',\n        encrypt_event_failed: '加密失败',\n        decrypt_event_failed: '解密失败',\n        decrypt_event_success: '解密成功',\n        upload_image: '上传图片',\n        upload_image_success: '上传图片成功',\n        upload_image_failed: '上传图片失败',\n        upload_image_cancelled: '取消上传图片',\n        upload_video: '上传视频',\n        upload_video_success: '上传视频成功',\n        upload_video_failed: '上传视频失败',\n        upload_gallery_list: '上传图库',\n        upload_gallery_list_success: '上传图库成功',\n        upload_gallery_list_failed: '上传图库失败',\n        upload_gallery_list_cancelled: '取消上传图库',\n        upload_file: '上传文件',\n        upload_file_success: '上传文件成功',\n        upload_file_failed: '上传文件失败',\n        upload_file_cancelled: '取消上传文件',\n      }\n      // 动态分组\n      const all = Object.entries(this.logData.action_type_count || {}).map(([key, value]) => ({\n        name: nameMap[key] || key,\n        value,\n        key\n      }))\n      // 上传相关：所有以 upload_ 开头的\n      const upload = all.filter(i => i.key.startsWith('upload_'))\n      // 加解密相关：encrypt_*, decrypt_*\n      const crypto = all.filter(i => i.key.startsWith('encrypt_') || i.key.startsWith('decrypt_'))\n      // 消息相关：send_*\n      const message = all.filter(i => i.key.startsWith('send_'))\n      // 房间/Socket相关\n      const roomSocket = all.filter(i => ['launch_count', 'enter_room_count', 'socket_disconnected_count'].includes(i.key))\n      // 其它\n      const groupedKeys = new Set([...upload, ...crypto, ...message, ...roomSocket].map(i => i.key))\n      const other = all.filter(i => !groupedKeys.has(i.key))\n      // 分组内排序\n      const sortByKey = arr => arr.slice().sort((a, b) => a.key.localeCompare(b.key))\n      return {\n        message: sortByKey(message),\n        upload: sortByKey(upload),\n        crypto: sortByKey(crypto),\n        roomSocket: sortByKey(roomSocket),\n        other: sortByKey(other)\n      }\n    },\n    timeData() {\n      const timeFields = [\n        { key: 'avg_socket_time', name: 'socket链接时长', value: this.formatNumber(this.logData.avg_socket_time?.average_response_time || 0) },\n        { key: 'roaming_message_avg_time', name: '漫游消息接收时间', value: this.formatNumber(this.logData.roaming_message_avg_time || 0) },\n        { key: 'delay_message_avg_time', name: '在线状态接收消息耗时', value: this.formatNumber(this.logData.delay_message_avg_time || 0) }\n      ]\n      return timeFields.filter(item => Number(item.value) > 0)\n    },\n    userLogsColumns() {\n      // 动态生成 user_logs 的所有字段列\n      const logs = this.logData.user_logs || []\n      if (!logs.length) return []\n      return Object.keys(logs[0]).map(key => ({\n        prop: key,\n        label: key,\n        minWidth: 120\n      }))\n    },\n    filteredUserLogs() {\n      // 多条件模糊筛选\n      const { device_id, launch_id, event_type, event_id, local_event_id } = this.userLogsFilter\n      return (this.logData.user_logs || []).filter(item => {\n        if (device_id && !(item.device_id || '').includes(device_id)) return false\n        if (launch_id && !(item.launch_id || '').includes(launch_id)) return false\n        if (event_type && !(item.event_type || '').includes(event_type)) return false\n        if (event_id && !(item.event_id || '').includes(event_id)) return false\n        if (local_event_id && !(item.local_event_id || '').includes(local_event_id)) return false\n        return true\n      })\n    },\n    textMessageAvgList() {\n      const t = this.logData.text_message_avg_time || {}\n      const total = t.send_text_message_avg_time || 1\n      return [\n        { label: '加密耗时', value: this.formatNumber(t.encrypt_avg_time || 0), percent: 0 },\n        { label: 'API耗时', value: this.formatNumber(t.send_text_message_avg_time || 0), percent: 0 }\n      ]\n    },\n    attachmentMessageAvgList() {\n      const t = this.logData.attachment_message_avg_time || {}\n      const total = t.send_message_total_avg_time || 1\n      return [\n        { label: '上传耗时', value: this.formatNumber(t.upload_avg_time || 0), percent: t.upload_avg_time && total ? Math.round(100 * t.upload_avg_time / total) : 0 },\n        { label: '发送API耗时', value: this.formatNumber(t.send_message_api_avg_time || 0), percent: t.send_message_api_avg_time && total ? Math.round(100 * t.send_message_api_avg_time / total) : 0 },\n        { label: '总耗时', value: this.formatNumber(t.send_message_total_avg_time || 0), percent: 100 }\n      ]\n    },\n  },\n  mounted() {\n    this.fetchData()\n  },\n  methods: {\n    async fetchData() {\n      let loadingInstance = null\n      try {\n        loadingInstance = ElLoading.service({\n          lock: true,\n          text: '加载中...',\n          background: 'rgba(0,0,0,0.3)'\n        })\n        const response = await api.getLogSummary(\n          this.filters.startTime,\n          this.filters.endTime,\n          this.filters.messageType\n        )\n        this.logData = adaptLogData(response.data)\n      } catch (error) {\n        console.error('获取日志数据失败:', error)\n        this.$message.error('获取数据失败，请稍后重试')\n      } finally {\n        if (loadingInstance) loadingInstance.close()\n      }\n    },\n    formatNumber(value) {\n      return Number(value).toFixed(1)\n    },\n    clearUserLogsFilter() {\n      this.userLogsFilter = {\n        device_id: '',\n        launch_id: '',\n        event_type: '',\n        event_id: '',\n        local_event_id: ''\n      }\n    },\n    async searchUserLogs() {\n      try {\n        const params = { ...this.userLogsSearch }\n        // 时间戳转数字\n        params.start_at = Number(params.start_at) || 0\n        params.end_at = Number(params.end_at) || Date.now()\n        const { data } = await api.searchUserLogs(params)\n        this.userLogsSearchResult = Array.isArray(data) ? data : []\n      } catch (e) {\n        this.userLogsSearchResult = []\n        this.$message.error('用户日志搜索失败')\n      }\n    },\n    clearUserLogsSearch() {\n      this.userLogsSearch = {\n        start_at: 0,\n        end_at: Date.now(),\n        user_id: '',\n        device_id: '',\n        launch_id: '',\n        action_type: '',\n        room_id: '',\n        message_type: '',\n        event_id: '',\n        local_event_id: ''\n      }\n      this.userLogsSearchResult = []\n    },\n    onMessageTypeChange() {\n      this.fetchData()\n    },\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.log-data-container {\n  padding: 20px;\n  min-height: 100vh;\n}\n\n.page-title {\n  font-size: 1.5rem;\n  margin-bottom: 20px;\n  color: var(--text-color);\n  font-weight: 500;\n  text-align: center;\n}\n\n/* 漫游消息流程图样式 */\n.roaming-flow-card {\n  margin-bottom: 24px;\n  background-color: #1e1e1e;\n  border: 1px solid var(--border-color);\n}\n\n.roaming-flow-container {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 20px 10px;\n  overflow-x: auto;\n  background-color: #121212;\n  border-radius: 4px;\n  min-height: 100px;\n}\n\n.flow-node {\n  background-color: #2c2c2c;\n  border: 1px solid #444;\n  border-radius: 4px;\n  padding: 10px 15px;\n  min-width: 120px;\n  text-align: center;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n  transition: all 0.3s ease;\n  flex-shrink: 0;\n}\n\n.flow-node:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.4);\n  border-color: #666;\n}\n\n.node-content {\n  font-size: 0.85rem;\n  color: #e0e0e0;\n  white-space: nowrap;\n}\n\n.flow-arrow {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 0 5px;\n  min-width: 80px;\n  flex-shrink: 0;\n}\n\n.arrow-line {\n  height: 2px;\n  background-color: #555;\n  width: 100%;\n  position: relative;\n}\n\n.arrow-line:after {\n  content: '';\n  position: absolute;\n  right: 0;\n  top: -4px;\n  width: 0;\n  height: 0;\n  border-top: 5px solid transparent;\n  border-bottom: 5px solid transparent;\n  border-left: 8px solid #555;\n}\n\n.arrow-label {\n  font-size: 0.75rem;\n  color: #aaa;\n  margin-top: 5px;\n  text-align: center;\n}\n\n.roaming-stats {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  margin-top: 15px;\n  padding: 10px 15px;\n  background-color: #1a1a1a;\n  border-radius: 4px;\n  border-top: 1px solid #333;\n}\n\n.stat-item {\n  display: flex;\n  align-items: center;\n  margin: 5px 15px;\n}\n\n.stat-label {\n  color: #aaa;\n  margin-right: 10px;\n  font-size: 0.9rem;\n}\n\n.stat-value {\n  color: #4db6ac;\n  font-weight: 500;\n  font-size: 1rem;\n}\n\n.filter-card {\n  margin-bottom: 20px;\n  max-width: 1000px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.filter-container {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  align-items: center;\n}\n\n.filter-group {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  align-items: center;\n  margin-bottom: 5px;\n  width: 100%;\n  justify-content: center;\n}\n\n.filter-button-group {\n  margin-top: 5px;\n}\n\n.query-button {\n  min-width: 100px;\n  font-size: 0.95rem;\n  padding: 8px 20px;\n}\n\n.filter-item {\n  display: flex;\n  align-items: center;\n  margin-right: 15px;\n  flex: 0 0 auto;\n}\n\n.filter-label {\n  color: var(--text-color);\n  margin-right: 10px;\n  min-width: 70px;\n  white-space: nowrap;\n}\n\n.data-display-section {\n  margin-top: 20px;\n}\n\n.custom-metric-card {\n  padding: 15px;\n  text-align: center;\n  margin-bottom: 20px;\n  height: 80px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border: 1px solid var(--border-color) !important;\n  position: relative;\n  overflow: hidden;\n  background-color: transparent;\n  border-radius: 8px;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.2);\n  transition: all 0.3s ease;\n  \n  &:hover {\n    border-color: var(--highlight-color) !important;\n    box-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.3);\n    transform: translateY(-2px);\n  }\n}\n\n.metric-value {\n  font-size: 2.2rem;\n  font-weight: 500;\n  color: var(--text-color);\n  margin-bottom: 10px;\n  text-shadow: 0 0 10px rgba(64, 158, 255, 0.15);\n}\n\n.metric-title {\n  font-size: 1rem;\n  color: var(--text-secondary);\n  font-weight: 400;\n}\n\n.table-card {\n  margin-bottom: 20px;\n  border: 1px solid var(--border-color) !important;\n  position: relative;\n  overflow: hidden;\n  background-color: transparent;\n  \n  &::after, &::before {\n    display: none !important;\n  }\n}\n\n.field-column {\n  color: var(--text-secondary);\n  font-size: 0.9em;\n}\n\n.metric-card-inner {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  align-items: flex-start;\n}\n\n.metric-card-label {\n  font-size: 1rem;\n  color: var(--text-secondary);\n  min-width: 80px;\n  display: inline-block;\n}\n\n.metric-card-value {\n  font-size: 1rem;\n  color: var(--text-color);\n  font-weight: 500;\n  margin-left: 10px;\n}\n\n.metric-secondary {\n  font-size: 0.875rem;\n  color: var(--text-secondary);\n  margin-top: 5px;\n  text-align: right;\n}\n\n// 深色日期选择器样式\n:deep(.dark-date-input) {\n  .el-input__inner {\n    background-color: #232323 !important;\n    color: var(--text-color) !important;\n    border-color: #444 !important;\n  }\n  input {\n    background-color: #232323 !important;\n    color: var(--text-color) !important;\n  }\n  .el-input__prefix, .el-input__suffix {\n    background-color: transparent !important;\n  }\n  .el-input__clear {\n    background-color: transparent !important;\n    color: var(--text-secondary) !important;\n  }\n  .el-input__icon {\n    background-color: transparent !important;\n  }\n}\n\n:deep(.dark-date-picker) {\n  background-color: #1e1e1e !important;\n  border: 1px solid var(--border-color) !important;\n  \n  .el-date-table td {\n    background-color: #1e1e1e !important;\n  }\n  \n  .el-date-picker__header {\n    background-color: #1e1e1e !important;\n  }\n  \n  .el-picker-panel__icon-btn {\n    color: var(--text-secondary) !important;\n  }\n  \n  .el-date-picker__header-label {\n    color: var(--text-color) !important;\n  }\n  \n  .el-picker-panel__content {\n    background-color: #1e1e1e !important;\n  }\n  \n  .el-date-table th, \n  .el-date-table td.next-month, \n  .el-date-table td.prev-month {\n    color: var(--text-secondary) !important;\n  }\n  \n  .el-date-table td.available:hover {\n    color: var(--highlight-color) !important;\n  }\n  \n  .el-picker-panel__footer {\n    background-color: #1e1e1e !important;\n    border-top: 1px solid var(--border-color) !important;\n  }\n  \n  .el-button--text {\n    color: var(--text-color) !important;\n  }\n  \n  .el-button--default {\n    background-color: #2a2a2a !important;\n    border-color: var(--border-color) !important;\n    color: var(--text-color) !important;\n  }\n  \n  .el-input__icon,\n  .el-input__prefix,\n  .el-input__suffix {\n    background-color: transparent !important;\n  }\n  \n  .el-date-editor .el-range__close-icon {\n    background-color: transparent !important;\n    color: var(--text-secondary) !important;\n  }\n  \n  .el-time-panel {\n    background-color: #1e1e1e !important;\n    border-color: var(--border-color) !important;\n  }\n  \n  .el-time-panel__content,\n  .el-time-spinner__wrapper,\n  .el-time-spinner__item {\n    background-color: #1e1e1e !important;\n    color: var(--text-color) !important;\n  }\n  \n  .el-date-editor--datetimerange,\n  .el-range-editor--datetimerange {\n    background-color: #2a2a2a !important;\n  }\n  \n  .el-date-editor .el-range-input {\n    background-color: #2a2a2a !important;\n    color: var(--text-color) !important;\n  }\n  \n  .el-date-editor .el-range-separator {\n    color: var(--text-secondary) !important;\n  }\n  \n  .popper__arrow {\n    background-color: #1e1e1e !important;\n    border-color: var(--border-color) !important;\n  }\n  \n  .popper__arrow::after {\n    border-color: #1e1e1e !important;\n  }\n  \n  // 修复时间选择器的白色部分\n  .el-time-panel__content::after,\n  .el-time-panel__content::before {\n    background-color: #333 !important;\n  }\n  \n  .el-time-spinner__wrapper::after,\n  .el-time-spinner__wrapper::before {\n    background-color: #333 !important;\n  }\n  \n  .el-time-panel__footer {\n    background-color: #1e1e1e !important;\n    border-top: 1px solid var(--border-color) !important;\n  }\n  \n  .el-input__inner {\n    background-color: #2a2a2a !important;\n    border-color: var(--border-color) !important;\n  }\n  \n  // 隐藏白色边线\n  .el-date-picker__time-header {\n    border-bottom: 1px solid var(--border-color) !important;\n  }\n}\n\n:deep(.dark-select) {\n  min-width: 160px;\n  \n  .el-input__inner {\n    background-color: #232323 !important;\n    color: var(--text-color) !important;\n    border-color: #444 !important;\n  }\n  \n  .el-select__tags {\n    background-color: transparent !important;\n    \n    .el-tag {\n      background-color: rgba(64, 158, 255, 0.15) !important;\n      color: var(--text-color) !important;\n      border-color: rgba(64, 158, 255, 0.3) !important;\n      margin: 2px;\n    }\n  }\n  \n  .el-select-dropdown__item.selected {\n    color: var(--highlight-color) !important;\n    font-weight: bold;\n    background-color: rgba(64, 158, 255, 0.1) !important;\n  }\n}\n\n:deep(.dark-select-dropdown) {\n  background-color: #1e1e1e !important;\n  \n  .el-select-dropdown__item {\n    color: var(--text-color) !important;\n  }\n  \n  .el-select-dropdown__item.hover {\n    background-color: #333 !important;\n  }\n}\n\n// 处理所有可能的白线\n:deep(.el-card) {\n  background-color: transparent !important;\n  \n  &::after, &::before {\n    background-color: var(--border-color) !important;\n    z-index: -1;\n  }\n  \n  .el-card__header {\n    border-bottom: 1px solid var(--divider-color) !important;\n    background-color: transparent !important;\n  }\n  \n  .el-card__body {\n    background-color: transparent !important;\n  }\n}\n\n:deep(.dark-table) {\n  background-color: transparent !important;\n  \n  &::before {\n    height: 0 !important;\n    background-color: transparent !important;\n  }\n  \n  &::after {\n    background-color: var(--divider-color) !important;\n  }\n  \n  th.el-table__cell {\n    background-color: transparent !important;\n    border-bottom: 1px solid var(--divider-color) !important;\n  }\n  \n  tr.el-table__row td {\n    background-color: transparent !important;\n    border-bottom: 1px solid var(--light-border) !important;\n  }\n  \n  tr.el-table__row:nth-child(even) td {\n    background-color: rgba(36, 37, 42, 0.15) !important;\n  }\n  \n  tr.highlighted-row td {\n    background-color: rgba(64, 158, 255, 0.15) !important;\n  }\n  \n  .el-table__header-wrapper {\n    border-bottom: 1px solid var(--divider-color) !important;\n  }\n\n  // 修复表格内部可能的白色背景\n  .el-table__body, \n  .el-table__footer,\n  .el-table__header {\n    background-color: transparent !important;\n  }\n\n  .el-table__empty-block {\n    background-color: transparent !important;\n  }\n\n  .el-table__cell {\n    background-color: transparent !important;\n  }\n}\n\n// 增加全局表格样式覆盖\n:deep(.el-table) {\n  background-color: transparent !important;\n  color: var(--text-color) !important;\n  \n  tr {\n    background-color: transparent !important;\n  }\n  \n  td.el-table__cell,\n  th.el-table__cell.is-leaf {\n    background-color: transparent !important;\n    border-bottom: 1px solid var(--light-border) !important;\n  }\n  \n  .el-table__body {\n    background-color: transparent !important;\n  }\n}\n\n.filter-card {\n  border: 1px solid var(--border-color) !important;\n  position: relative;\n  overflow: hidden;\n  background-color: transparent !important;\n  \n  &::after, &::before {\n    display: none !important;\n  }\n}\n\n@media (max-width: 768px) {\n  .page-title {\n    font-size: 1.3rem;\n  }\n  \n  .filter-item {\n    margin-bottom: 8px;\n  }\n  \n  .log-data-container {\n    padding: 10px;\n  }\n}\n\n:deep(.dark-input) {\n  min-width: 160px;\n  background-color: #232323; \n  border-radius: 6px;         \n  \n  .el-input__inner {\n    background-color: transparent !important;\n    color: var(--text-color) !important;\n    border-color: #444 !important;\n  }\n}\n\n:deep(.el-progress-bar__outer) {\n  background-color: #23272f !important;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}